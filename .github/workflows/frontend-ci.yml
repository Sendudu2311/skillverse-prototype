name: 🌐 Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Code Quality & Testing
  quality-check:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci --silent
        
    - name: 🧹 Code Linting
      run: |
        npm run lint
        
    - name: 🏗️ Build Check
      run: |
        npm run build
        
    - name: 📊 Bundle Size Analysis
      run: |
        npm run build
        du -sh dist/
        find dist/ -name "*.js" -exec du -h {} \; | sort -hr | head -10
        
    - name: 🧪 Run Tests (if available)
      run: |
        if npm run test --if-present; then
          echo "Tests passed!"
        else
          echo "No tests found or tests skipped"
        fi
        
    - name: 📈 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build-${{ github.sha }}
        path: ./dist/
        retention-days: 7

  # Job 2: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci --silent
      
    - name: 🔍 Audit Dependencies
      run: |
        npm audit --audit-level=moderate
      continue-on-error: true
        
    - name: 🛡️ Check for Vulnerabilities
      run: |
        npx --yes audit-ci --moderate
      continue-on-error: true

  # Job 3: Docker Build (on main branch)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker Image
      run: |
        docker build -t skillverse-frontend:${{ github.sha }} .
        docker tag skillverse-frontend:${{ github.sha }} skillverse-frontend:latest
        
    - name: 🧪 Test Docker Image
      run: |
        docker run --rm -p 3000:80 -d --name test-frontend skillverse-frontend:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3000 || exit 1
        docker stop test-frontend

  # Job 4: Deployment Status
  deployment-status:
    name: 📊 Deployment Status
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, docker-build]
    if: always()
    
    steps:
    - name: 📊 Report Status
      run: |
        echo "## 🌐 Frontend CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Check**: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request' && (failure() || success())
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ needs.quality-check.result }}' === 'success' && 
                        '${{ needs.security-scan.result }}' === 'success' ? '✅' : '❌';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status} **Frontend CI/CD Results**
            
            - Quality Check: ${{ needs.quality-check.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Commit: \`${{ github.sha }}\`
            
            ${status === '❌' ? '⚠️ Please fix the issues before merging.' : '🎉 All checks passed! Ready to merge.'}`
          })