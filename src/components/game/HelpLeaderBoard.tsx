import React, { useState, useEffect } from 'react';
import { X, Trophy, Medal, Crown, Users, TrendingUp, Gift, Star, Zap } from 'lucide-react';
import '../../styles/HelpLeaderBoard.css';

interface HelpLeaderBoardProps {
  isOpen: boolean;
  onClose: () => void;
  onCoinsEarned: (coins: number) => void;
}

interface LeaderboardEntry {
  id: string;
  name: string;
  avatar: string;
  helpCount: number;
  coinsEarned: number;
  rank: number;
  badge: 'gold' | 'silver' | 'bronze' | 'participant';
  isCurrentUser?: boolean;
}

interface WeeklyChallenge {
  id: string;
  title: string;
  description: string;
  target: number;
  current: number;
  reward: number;
  completed: boolean;
}

const HelpLeaderBoard: React.FC<HelpLeaderBoardProps> = ({ isOpen, onClose, onCoinsEarned }) => {
  const [activeTab, setActiveTab] = useState<'leaderboard' | 'challenges' | 'rewards'>('leaderboard');
  const [leaderboardData, setLeaderboardData] = useState<LeaderboardEntry[]>([]);
  const [weeklyChallenges, setWeeklyChallenges] = useState<WeeklyChallenge[]>([]);
  const [userStats, setUserStats] = useState({ helpCount: 0, coinsEarned: 0, rank: 0 });

  useEffect(() => {
    if (isOpen) {
      // Generate mock leaderboard data
      const mockData: LeaderboardEntry[] = [
        { id: '1', name: 'Minh T√∫', avatar: 'üë®‚Äçüíª', helpCount: 45, coinsEarned: 2250, rank: 1, badge: 'gold' },
        { id: '2', name: 'Lan Anh', avatar: 'üë©‚Äçüéì', helpCount: 38, coinsEarned: 1900, rank: 2, badge: 'silver' },
        { id: '3', name: 'ƒê·ª©c Vi·ªát', avatar: 'üë®‚Äçüè´', helpCount: 32, coinsEarned: 1600, rank: 3, badge: 'bronze' },
        { id: '4', name: 'Thu H√†', avatar: 'üë©‚Äçüíº', helpCount: 28, coinsEarned: 1400, rank: 4, badge: 'participant' },
        { id: '5', name: 'Quang Minh', avatar: 'üë®‚Äçüé®', helpCount: 25, coinsEarned: 1250, rank: 5, badge: 'participant' },
        { id: '6', name: 'B√≠ch Ng·ªçc', avatar: 'üë©‚Äçüî¨', helpCount: 22, coinsEarned: 1100, rank: 6, badge: 'participant' },
        { id: '7', name: 'VƒÉn H√πng', avatar: 'üë®‚Äç‚öïÔ∏è', helpCount: 18, coinsEarned: 900, rank: 7, badge: 'participant' },
        { id: '8', name: 'B·∫°n', avatar: 'üßë‚Äçüíª', helpCount: 15, coinsEarned: 750, rank: 8, badge: 'participant', isCurrentUser: true },
        { id: '9', name: 'Th·∫£o My', avatar: 'üë©‚Äçüé§', helpCount: 12, coinsEarned: 600, rank: 9, badge: 'participant' },
        { id: '10', name: 'Ho√†ng Nam', avatar: 'üë®‚Äçüç≥', helpCount: 10, coinsEarned: 500, rank: 10, badge: 'participant' },
      ];
      setLeaderboardData(mockData);

      // Generate mock challenges
      const mockChallenges: WeeklyChallenge[] = [
        {
          id: '1',
          title: 'Ng∆∞·ªùi Tr·ª£ Gi√∫p T·∫≠n T√¢m',
          description: 'Tr·∫£ l·ªùi 10 c√¢u h·ªèi trong tu·∫ßn n√†y',
          target: 10,
          current: 6,
          reward: 200,
          completed: false
        },
        {
          id: '2',
          title: 'Chuy√™n Gia Chia S·∫ª',
          description: 'Nh·∫≠n 25 l∆∞·ª£t th√≠ch cho c√¢u tr·∫£ l·ªùi',
          target: 25,
          current: 18,
          reward: 300,
          completed: false
        },
        {
          id: '3',
          title: 'Ng∆∞·ªùi Mentor Xu·∫•t S·∫Øc',
          description: 'Gi√∫p ƒë·ª° 5 ng∆∞·ªùi d√πng m·ªõi',
          target: 5,
          current: 5,
          reward: 500,
          completed: true
        }
      ];
      setWeeklyChallenges(mockChallenges);

      // Set user stats
      const currentUser = mockData.find(entry => entry.isCurrentUser);
      if (currentUser) {
        setUserStats({
          helpCount: currentUser.helpCount,
          coinsEarned: currentUser.coinsEarned,
          rank: currentUser.rank
        });
      }
    }
  }, [isOpen]);

  const getBadgeIcon = (badge: string, size = 24) => {
    switch (badge) {
      case 'gold': return <Crown size={size} className="badge-gold" />;
      case 'silver': return <Medal size={size} className="badge-silver" />;
      case 'bronze': return <Trophy size={size} className="badge-bronze" />;
      default: return <Star size={size} className="badge-participant" />;
    }
  };

  const claimReward = (challengeId: string, reward: number) => {
    setWeeklyChallenges(prev => 
      prev.map(challenge => 
        challenge.id === challengeId 
          ? { ...challenge, completed: true }
          : challenge
      )
    );
    onCoinsEarned(reward);
  };

  if (!isOpen) return null;

  return (
    <div className="help-leaderboard-overlay">
      <div className="help-leaderboard-modal">
        <div className="help-leaderboard-header">
          <div className="header-left">
            <h3>ü´∂ B·∫£ng X·∫øp H·∫°ng Gi√∫p ƒê·ª°</h3>
            <p>C√πng nhau x√¢y d·ª±ng c·ªông ƒë·ªìng h·ªçc t·∫≠p t√≠ch c·ª±c!</p>
          </div>
          <button className="close-btn" onClick={onClose}>
            <X />
          </button>
        </div>

        <div className="tabs-container">
          <div className="tabs">
            <button 
              className={`tab ${activeTab === 'leaderboard' ? 'active' : ''}`}
              onClick={() => setActiveTab('leaderboard')}
            >
              <Trophy className="tab-icon" />
              X·∫øp H·∫°ng
            </button>
            <button 
              className={`tab ${activeTab === 'challenges' ? 'active' : ''}`}
              onClick={() => setActiveTab('challenges')}
            >
              <Zap className="tab-icon" />
              Th·ª≠ Th√°ch
            </button>
            <button 
              className={`tab ${activeTab === 'rewards' ? 'active' : ''}`}
              onClick={() => setActiveTab('rewards')}
            >
              <Gift className="tab-icon" />
              Ph·∫ßn Th∆∞·ªüng
            </button>
          </div>
        </div>

        <div className="content">
          {activeTab === 'leaderboard' && (
            <div className="leaderboard-content">
              {/* User Stats */}
              <div className="user-stats-card">
                <div className="stats-header">
                  <h4>üìä Th·ªëng K√™ C·ªßa B·∫°n</h4>
                </div>
                <div className="stats-grid">
                  <div className="stat-item">
                    <div className="stat-icon">
                      <Users />
                    </div>
                    <div className="stat-details">
                      <div className="stat-value">{userStats.helpCount}</div>
                      <div className="stat-label">L·∫ßn gi√∫p ƒë·ª°</div>
                    </div>
                  </div>
                  <div className="stat-item">
                    <div className="stat-icon">
                      <Gift />
                    </div>
                    <div className="stat-details">
                      <div className="stat-value">{userStats.coinsEarned}</div>
                      <div className="stat-label">Xu ki·∫øm ƒë∆∞·ª£c</div>
                    </div>
                  </div>
                  <div className="stat-item">
                    <div className="stat-icon">
                      <TrendingUp />
                    </div>
                    <div className="stat-details">
                      <div className="stat-value">#{userStats.rank}</div>
                      <div className="stat-label">X·∫øp h·∫°ng</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Top 3 Podium */}
              <div className="podium-container">
                <h4>üèÜ Top 3 Tu·∫ßn N√†y</h4>
                <div className="podium">
                  {leaderboardData.slice(0, 3).map((user, index) => (
                    <div key={user.id} className={`podium-place place-${index + 1}`}>
                      <div className="podium-rank">{index + 1}</div>
                      <div className="podium-avatar">{user.avatar}</div>
                      <div className="podium-name">{user.name}</div>
                      <div className="podium-stats">
                        <div className="podium-badge">
                          {getBadgeIcon(user.badge, 20)}
                        </div>
                        <div className="podium-help">{user.helpCount} l·∫ßn</div>
                        <div className="podium-coins">{user.coinsEarned} xu</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Full Leaderboard */}
              <div className="full-leaderboard">
                <h4>üìã B·∫£ng X·∫øp H·∫°ng ƒê·∫ßy ƒê·ªß</h4>
                <div className="leaderboard-list">
                  {leaderboardData.map((user) => (
                    <div 
                      key={user.id} 
                      className={`leaderboard-item ${user.isCurrentUser ? 'current-user' : ''}`}
                    >
                      <div className="rank-section">
                        <div className="rank-number">#{user.rank}</div>
                        <div className="rank-badge">{getBadgeIcon(user.badge, 16)}</div>
                      </div>
                      
                      <div className="user-section">
                        <div className="user-avatar">{user.avatar}</div>
                        <div className="user-info">
                          <div className="user-name">{user.name}</div>
                          <div className="user-subtitle">
                            {user.helpCount} l·∫ßn gi√∫p ƒë·ª°
                          </div>
                        </div>
                      </div>

                      <div className="coins-section">
                        <div className="coins-earned">{user.coinsEarned}</div>
                        <div className="coins-label">xu</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'challenges' && (
            <div className="challenges-content">
              <div className="challenges-header">
                <h4>‚ö° Th·ª≠ Th√°ch Tu·∫ßn N√†y</h4>
                <p>Ho√†n th√†nh th·ª≠ th√°ch ƒë·ªÉ nh·∫≠n th∆∞·ªüng ƒë·∫∑c bi·ªát!</p>
              </div>

              <div className="challenges-list">
                {weeklyChallenges.map((challenge) => (
                  <div 
                    key={challenge.id} 
                    className={`challenge-card ${challenge.completed ? 'completed' : ''}`}
                  >
                    <div className="challenge-header">
                      <div className="challenge-title">{challenge.title}</div>
                      {challenge.completed && (
                        <div className="completed-badge">
                          <Star className="completed-icon" />
                          Ho√†n th√†nh
                        </div>
                      )}
                    </div>

                    <div className="challenge-description">
                      {challenge.description}
                    </div>

                    <div className="progress-section">
                      <div className="progress-bar">
                        <div 
                          className="progress-fill"
                          style={{ width: `${Math.min((challenge.current / challenge.target) * 100, 100)}%` }}
                        />
                      </div>
                      <div className="progress-text">
                        {challenge.current} / {challenge.target}
                      </div>
                    </div>

                    <div className="challenge-footer">
                      <div className="reward-info">
                        <Gift className="reward-icon" />
                        <span>+{challenge.reward} xu</span>
                      </div>
                      
                      {challenge.completed && (
                        <button 
                          className="claim-reward-btn"
                          onClick={() => claimReward(challenge.id, challenge.reward)}
                        >
                          Nh·∫≠n th∆∞·ªüng
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'rewards' && (
            <div className="rewards-content">
              <div className="rewards-header">
                <h4>üéÅ H·ªá Th·ªëng Ph·∫ßn Th∆∞·ªüng</h4>
                <p>C√°c ph·∫ßn th∆∞·ªüng d√†nh cho nh·ªØng ng∆∞·ªùi gi√∫p ƒë·ª° c·ªông ƒë·ªìng</p>
              </div>

              <div className="rewards-grid">
                <div className="reward-tier">
                  <div className="tier-icon bronze">
                    <Trophy />
                  </div>
                  <h5>Ng∆∞·ªùi M·ªõi B·∫Øt ƒê·∫ßu</h5>
                  <div className="tier-requirement">1-5 l·∫ßn gi√∫p ƒë·ª°</div>
                  <div className="tier-rewards">
                    <div className="reward-item">ü™ô 10 xu/l·∫ßn gi√∫p ƒë·ª°</div>
                    <div className="reward-item">‚≠ê Huy hi·ªáu "Ng∆∞·ªùi H·ªó Tr·ª£"</div>
                  </div>
                </div>

                <div className="reward-tier">
                  <div className="tier-icon silver">
                    <Medal />
                  </div>
                  <h5>Ng∆∞·ªùi H·ªó Tr·ª£ T√≠ch C·ª±c</h5>
                  <div className="tier-requirement">6-20 l·∫ßn gi√∫p ƒë·ª°</div>
                  <div className="tier-rewards">
                    <div className="reward-item">ü™ô 25 xu/l·∫ßn gi√∫p ƒë·ª°</div>
                    <div className="reward-item">üéñÔ∏è Huy hi·ªáu "Ng∆∞·ªùi Mentor"</div>
                    <div className="reward-item">üéÅ Bonus 100 xu/tu·∫ßn</div>
                  </div>
                </div>

                <div className="reward-tier">
                  <div className="tier-icon gold">
                    <Crown />
                  </div>
                  <h5>Chuy√™n Gia C·ªông ƒê·ªìng</h5>
                  <div className="tier-requirement">21+ l·∫ßn gi√∫p ƒë·ª°</div>
                  <div className="tier-rewards">
                    <div className="reward-item">ü™ô 50 xu/l·∫ßn gi√∫p ƒë·ª°</div>
                    <div className="reward-item">üëë Huy hi·ªáu "Chuy√™n Gia"</div>
                    <div className="reward-item">üéÅ Bonus 300 xu/tu·∫ßn</div>
                    <div className="reward-item">üåü ∆Øu ti√™n hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi</div>
                  </div>
                </div>
              </div>

              <div className="special-rewards">
                <h5>üåü Ph·∫ßn Th∆∞·ªüng ƒê·∫∑c Bi·ªát</h5>
                <div className="special-rewards-list">
                  <div className="special-reward-item">
                    <div className="special-icon">üèÜ</div>
                    <div className="special-details">
                      <div className="special-title">Top 1 Tu·∫ßn</div>
                      <div className="special-description">Nh·∫≠n 1000 xu bonus + huy hi·ªáu ƒë·∫∑c bi·ªát</div>
                    </div>
                  </div>
                  <div className="special-reward-item">
                    <div className="special-icon">üéØ</div>
                    <div className="special-details">
                      <div className="special-title">Chu·ªói Gi√∫p ƒê·ª°</div>
                      <div className="special-description">Gi√∫p ƒë·ª° 7 ng√†y li√™n ti·∫øp: +500 xu</div>
                    </div>
                  </div>
                  <div className="special-reward-item">
                    <div className="special-icon">üíé</div>
                    <div className="special-details">
                      <div className="special-title">C√¢u Tr·∫£ L·ªùi Xu·∫•t S·∫Øc</div>
                      <div className="special-description">Nh·∫≠n 50+ l∆∞·ª£t th√≠ch: +200 xu</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default HelpLeaderBoard;
