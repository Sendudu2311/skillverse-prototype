import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Lightbulb, BookOpen, Briefcase, Award, MessageSquare } from 'lucide-react';

const ChatbotPage = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: 'Ch√†o b·∫°n! T√¥i l√† AI Career Advisor c·ªßa Skillverse. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp, l·ª±a ch·ªçn k·ªπ nƒÉng c·∫ßn h·ªçc v√† t√¨m ki·∫øm c∆° h·ªôi vi·ªác l√†m ph√π h·ª£p. B·∫°n mu·ªën t∆∞ v·∫•n v·ªÅ v·∫•n ƒë·ªÅ g√¨?',
      timestamp: new Date().toLocaleTimeString()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickSuggestions = [
    {
      icon: Lightbulb,
      title: 'Kh√°m ph√° s·ªü th√≠ch',
      message: 'T√¥i mu·ªën kh√°m ph√° s·ªü th√≠ch v√† t√¨m ngh·ªÅ nghi·ªáp ph√π h·ª£p'
    },
    {
      icon: BookOpen,
      title: 'L·ªô tr√¨nh h·ªçc t·∫≠p',
      message: 'H√£y ƒë·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc t·∫≠p cho ng√†nh t√¥i quan t√¢m'
    },
    {
      icon: Briefcase,
      title: 'C∆° h·ªôi vi·ªác l√†m',
      message: 'Cho t√¥i bi·∫øt v·ªÅ c∆° h·ªôi vi·ªác l√†m trong lƒ©nh v·ª±c n√†y'
    },
    {
      icon: Award,
      title: 'Ph√°t tri·ªÉn k·ªπ nƒÉng',
      message: 'T√¥i c·∫ßn ph√°t tri·ªÉn nh·ªØng k·ªπ nƒÉng n√†o ƒë·ªÉ th√†nh c√¥ng?'
    }
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (messageContent?: string) => {
    const content = messageContent || inputMessage.trim();
    if (!content) return;

    const userMessage = {
      id: messages.length + 1,
      type: 'user' as const,
      content,
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const botResponse = generateBotResponse(content);
      const botMessage = {
        id: messages.length + 2,
        type: 'bot' as const,
        content: botResponse,
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateBotResponse = (userInput: string) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('s·ªü th√≠ch') || input.includes('ngh·ªÅ nghi·ªáp ph√π h·ª£p')) {
      return `Tuy·ªát v·ªùi! ƒê·ªÉ gi√∫p b·∫°n kh√°m ph√° ngh·ªÅ nghi·ªáp ph√π h·ª£p, t√¥i s·∫Ω h·ªèi m·ªôt v√†i c√¢u h·ªèi:

üéØ **C√¢u h·ªèi 1**: B·∫°n th√≠ch l√†m vi·ªác v·ªõi:
- A) M√°y t√≠nh v√† c√¥ng ngh·ªá
- B) Con ng∆∞·ªùi v√† giao ti·∫øp
- C) S√°ng t·∫°o v√† ngh·ªá thu·∫≠t
- D) S·ªë li·ªáu v√† ph√¢n t√≠ch

H√£y ch·ªçn ƒë√°p √°n v√† t√¥i s·∫Ω ti·∫øp t·ª•c h∆∞·ªõng d·∫´n b·∫°n!`;
    }
    
    if (input.includes('l·ªô tr√¨nh h·ªçc t·∫≠p') || input.includes('h·ªçc g√¨')) {
      return `ƒê·ªÉ ƒë·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p, t√¥i c·∫ßn bi·∫øt th√™m v·ªÅ b·∫°n:

üìö **Th√¥ng tin c·∫ßn thi·∫øt**:
1. B·∫°n ƒëang h·ªçc/l√†m ng√†nh g√¨?
2. M·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n l√† g√¨?
3. Th·ªùi gian b·∫°n c√≥ th·ªÉ d√†nh ƒë·ªÉ h·ªçc m·ªói tu·∫ßn?

**M·ªôt s·ªë ng√†nh hot hi·ªán t·∫°i**:
‚Ä¢ **C√¥ng ngh·ªá**: Web Development, Data Science, AI/ML
‚Ä¢ **Thi·∫øt k·∫ø**: UI/UX Design, Graphic Design
‚Ä¢ **Marketing**: Digital Marketing, Content Marketing
‚Ä¢ **Kinh doanh**: E-commerce, Project Management

H√£y chia s·∫ª th√™m ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n!`;
    }
    
    if (input.includes('vi·ªác l√†m') || input.includes('c∆° h·ªôi')) {
      return `Th·ªã tr∆∞·ªùng vi·ªác l√†m hi·ªán t·∫°i r·∫•t s√¥i ƒë·ªông! ƒê√¢y l√† nh·ªØng th√¥ng tin h·ªØu √≠ch:

üíº **Ng√†nh c√≥ nhi·ªÅu c∆° h·ªôi**:
‚Ä¢ **IT & Technology**: L∆∞∆°ng cao, nhi·ªÅu vi·ªác l√†m
‚Ä¢ **Digital Marketing**: Ph√°t tri·ªÉn m·∫°nh v·ªõi e-commerce  
‚Ä¢ **Thi·∫øt k·∫ø UI/UX**: Nhu c·∫ßu tƒÉng cao
‚Ä¢ **Data Analysis**: Xu h∆∞·ªõng t∆∞∆°ng lai

üéØ **L·ªùi khuy√™n**:
1. B·∫Øt ƒë·∫ßu v·ªõi micro-jobs ƒë·ªÉ t√≠ch l≈©y kinh nghi·ªám
2. X√¢y d·ª±ng portfolio chuy√™n nghi·ªáp
3. Network v·ªõi c√°c chuy√™n gia trong ng√†nh
4. H·ªçc li√™n t·ª•c v√† c·∫≠p nh·∫≠t k·ªπ nƒÉng

B·∫°n quan t√¢m ƒë·∫øn ng√†nh n√†o? T√¥i s·∫Ω t∆∞ v·∫•n c·ª• th·ªÉ h∆°n!`;
    }
    
    if (input.includes('k·ªπ nƒÉng') || input.includes('skill')) {
      return `K·ªπ nƒÉng l√† ch√¨a kh√≥a th√†nh c√¥ng! ƒê√¢y l√† nh·ªØng k·ªπ nƒÉng quan tr·ªçng:

üöÄ **K·ªπ nƒÉng c·ª©ng (Hard Skills)**:
‚Ä¢ **L·∫≠p tr√¨nh**: JavaScript, Python, React
‚Ä¢ **Thi·∫øt k·∫ø**: Figma, Adobe Creative Suite
‚Ä¢ **Marketing**: Google Ads, SEO, Analytics
‚Ä¢ **Ph√¢n t√≠ch**: Excel, SQL, Power BI

üí° **K·ªπ nƒÉng m·ªÅm (Soft Skills)**:
‚Ä¢ Giao ti·∫øp v√† thuy·∫øt tr√¨nh
‚Ä¢ T∆∞ duy ph·∫£n bi·ªán
‚Ä¢ Qu·∫£n l√Ω th·ªùi gian
‚Ä¢ L√†m vi·ªác nh√≥m

üìà **C√°ch ph√°t tri·ªÉn**:
1. Tham gia kh√≥a h·ªçc micro tr√™n Skillverse
2. Th·ª±c h√†nh qua c√°c d·ª± √°n th·ª±c t·∫ø
3. T√¨m mentor trong ng√†nh
4. Tham gia c·ªông ƒë·ªìng chuy√™n m√¥n

B·∫°n mu·ªën ph√°t tri·ªÉn k·ªπ nƒÉng n√†o tr∆∞·ªõc?`;
    }

    // Default response
    return `C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn "${userInput}".

ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ:
‚Ä¢ S·ª≠ d·ª•ng c√°c g·ª£i √Ω ph√≠a d∆∞·ªõi
‚Ä¢ H·ªèi c·ª• th·ªÉ v·ªÅ ng√†nh ngh·ªÅ quan t√¢m
‚Ä¢ Chia s·∫ª m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n

T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä`;
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8 text-center">
          <div className="flex justify-center mb-4">
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-4 rounded-full">
              <Bot className="h-8 w-8 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-4">AI Career Advisor</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Tr√≤ chuy·ªán v·ªõi AI th√¥ng minh ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n ngh·ªÅ nghi·ªáp c√° nh√¢n h√≥a, 
            kh√°m ph√° k·ªπ nƒÉng c·∫ßn thi·∫øt v√† l·ªô tr√¨nh ph√°t tri·ªÉn s·ª± nghi·ªáp
          </p>
        </div>

        {/* Chat Container */}
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          {/* Messages */}
          <div className="h-96 overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex space-x-3 max-w-xs lg:max-w-md ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                  <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                    message.type === 'user' 
                      ? 'bg-blue-600' 
                      : 'bg-gradient-to-r from-purple-600 to-pink-600'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="h-4 w-4 text-white" />
                    ) : (
                      <Bot className="h-4 w-4 text-white" />
                    )}
                  </div>
                  <div>
                    <div className={`px-4 py-3 rounded-lg ${
                      message.type === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}>
                      <div className="whitespace-pre-wrap text-sm">{message.content}</div>
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {message.timestamp}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="flex space-x-3 max-w-xs">
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center">
                    <Bot className="h-4 w-4 text-white" />
                  </div>
                  <div className="bg-gray-100 px-4 py-3 rounded-lg">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Suggestions */}
          <div className="border-t border-gray-200 p-4">
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-700 mb-3">G·ª£i √Ω nhanh:</h3>
              <div className="grid grid-cols-2 gap-2">
                {quickSuggestions.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSendMessage(suggestion.message)}
                    className="flex items-center space-x-2 p-3 text-left bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group"
                  >
                    <suggestion.icon className="h-4 w-4 text-blue-600 group-hover:text-blue-700" />
                    <span className="text-sm text-gray-700 group-hover:text-gray-900">{suggestion.title}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Input */}
            <div className="flex space-x-3">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-12"
                  disabled={isTyping}
                />
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <MessageSquare className="h-5 w-5 text-gray-400" />
                </div>
              </div>
              <button
                onClick={() => handleSendMessage()}
                disabled={!inputMessage.trim() || isTyping}
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
              >
                <Send className="h-4 w-4" />
                <span>G·ª≠i</span>
              </button>
            </div>
          </div>
        </div>

        {/* Features */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white p-6 rounded-lg shadow-sm text-center">
            <div className="bg-blue-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
              <Lightbulb className="h-6 w-6 text-blue-600" />
            </div>
            <h3 className="font-semibold text-gray-900 mb-2">Kh√°m ph√° s·ªü th√≠ch</h3>
            <p className="text-sm text-gray-600">T√¨m hi·ªÉu v·ªÅ b·∫£n th√¢n v√† ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi t√≠nh c√°ch c·ªßa b·∫°n</p>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm text-center">
            <div className="bg-green-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
              <BookOpen className="h-6 w-6 text-green-600" />
            </div>
            <h3 className="font-semibold text-gray-900 mb-2">L·ªô tr√¨nh h·ªçc t·∫≠p</h3>
            <p className="text-sm text-gray-600">Nh·∫≠n l·ªô tr√¨nh h·ªçc t·∫≠p c√° nh√¢n h√≥a cho m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n</p>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm text-center">
            <div className="bg-purple-100 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
              <Award className="h-6 w-6 text-purple-600" />
            </div>
            <h3 className="font-semibold text-gray-900 mb-2">Ph√°t tri·ªÉn k·ªπ nƒÉng</h3>
            <p className="text-sm text-gray-600">X√°c ƒë·ªãnh k·ªπ nƒÉng c·∫ßn thi·∫øt v√† c√°ch ph√°t tri·ªÉn ƒë·ªÉ th√†nh c√¥ng</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatbotPage;