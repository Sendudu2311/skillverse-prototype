import React, { useState, useRef, useEffect } from 'react';
import { 
  Send, Bot, User, Sparkles, Brain, Target, Briefcase, Book, Award, Star, ArrowRight,
  BookOpen, Globe, DollarSign, ChevronRight, Clock, Lightbulb, Zap, TrendingUp, Code, 
  BarChart3, Users
} from 'lucide-react';
import { useTheme } from '../../context/ThemeContext';
import MeowlGuide from '../../components/MeowlGuide';
import '../../styles/ChatbotPage.css';

interface RecommendationSection {
  title: string;
  items: string[];
}

interface RoadmapStep {
  id: string;
  title: string;
  description: string;
  duration: string;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  skills: string[];
  resources: string[];
  completed?: boolean;
}

interface LearningRoadmap {
  id: string;
  title: string;
  description: string;
  totalDuration: string;
  difficulty: string;
  steps: RoadmapStep[];
  prerequisites?: string[];
  careerOutcomes?: string[];
}

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  recommendations?: RecommendationSection[];
  resources?: Resource[];
  nextSteps?: string[];
  roadmap?: LearningRoadmap;
}

interface CourseRecommendation {
  type: 'course';
  title: string;
  provider: string;
  duration: string;
  rating: number;
  students: number;
  price: string;
  image: string;
}

interface JobRecommendation {
  type: 'job';
  title: string;
  company: string;
  location: string;
  salary: string;
  posted: string;
  image: string;
}

interface SkillRecommendation {
  type: 'skill';
  title: string;
  category: string;
  difficulty: string;
  timeToLearn: string;
  demand: string;
  image: string;
}

type Recommendation = CourseRecommendation | JobRecommendation | SkillRecommendation;

interface Resource {
  title: string;
  link: string;
  description: string;
}

interface AIResponse {
  text: string;
  recommendations?: {
    title: string;
    items: string[];
  }[];
  resources?: Resource[];
  nextSteps?: string[];
  roadmap?: LearningRoadmap;
}

interface Feature {
  icon: React.ElementType;
  title: string;
  description: string;
  color: string;
}

interface PromptCategory {
  title: string;
  icon: React.ElementType;
  color: string;
  prompts: string[];
}

const ChatbotPage = () => {
  const { theme } = useTheme();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa SkillVerse. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ üéØ L·∫≠p k·∫ø ho·∫°ch ngh·ªÅ nghi·ªáp\n‚Ä¢ üìö T∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p\n‚Ä¢ üíº Ph√¢n t√≠ch th·ªã tr∆∞·ªùng vi·ªác l√†m\n‚Ä¢ ÔøΩÔ∏è T·∫°o l·ªô tr√¨nh h·ªçc t∆∞∆°ng t√°c cho t·ª´ng ng√¥n ng·ªØ l·∫≠p tr√¨nh\n‚Ä¢ ÔøΩüöÄ Ph√°t tri·ªÉn k·ªπ nƒÉng\n\nTh·ª≠ h·ªèi: "T·∫°o l·ªô tr√¨nh h·ªçc JavaScript" ho·∫∑c "L·ªô tr√¨nh h·ªçc Python"!',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const features: Feature[] = [
    {
      icon: Brain,
      title: 'L·ªô Tr√¨nh H·ªçc C√° Nh√¢n H√≥a',
      description: 'Nh·∫≠n ƒë·ªÅ xu·∫•t kh√≥a h·ªçc ƒë∆∞·ª£c t√πy ch·ªânh d·ª±a tr√™n m·ª•c ti√™u v√† k·ªπ nƒÉng hi·ªán t·∫°i c·ªßa b·∫°n',
      color: 'blue'
    },
    {
      icon: Target,
      title: 'Quy Ho·∫°ch Ngh·ªÅ Nghi·ªáp',
      description: 'Kh√°m ph√° c∆° h·ªôi ngh·ªÅ nghi·ªáp v√† k·ªπ nƒÉng c·∫ßn thi·∫øt cho c√¥ng vi·ªác m∆° ∆∞·ªõc',
      color: 'green'
    },
    {
      icon: Briefcase,
      title: 'Th√¥ng Tin Th·ªã Tr∆∞·ªùng Vi·ªác L√†m',
      description: 'C·∫≠p nh·∫≠t xu h∆∞·ªõng ng√†nh v√† k·ªπ nƒÉng ƒë∆∞·ª£c y√™u c·∫ßu cao',
      color: 'purple'
    },
    {
      icon: Book,
      title: 'ƒê·ªÅ Xu·∫•t Kh√≥a H·ªçc',
      description: 'T√¨m kh√≥a h·ªçc t·ªët nh·∫•t ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ngh·ªÅ nghi·ªáp',
      color: 'orange'
    }
  ];

  const promptCategories: PromptCategory[] = [
    {
      title: 'L·ªô Tr√¨nh H·ªçc T·∫≠p',
      icon: Briefcase,
      color: 'blue',
      prompts: [
        'T·∫°o l·ªô tr√¨nh h·ªçc JavaScript',
        'L·ªô tr√¨nh h·ªçc Python t·ª´ c∆° b·∫£n',
        'Roadmap h·ªçc React.js',
        'L·ªô tr√¨nh tr·ªü th√†nh Full-stack Developer',
        'K·∫ø ho·∫°ch h·ªçc AI/Machine Learning'
      ]
    },
    {
      title: 'Ph√°t Tri·ªÉn K·ªπ NƒÉng',
      icon: BookOpen,
      color: 'green',
      prompts: [
        'N√™n h·ªçc ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o?',
        'C√¢n b·∫±ng k·ªπ nƒÉng c·ª©ng v√† m·ªÅm?',
        'L·ªô tr√¨nh h·ªçc cloud computing?',
        'H·ªçc UI/UX design t·ª´ ƒë√¢u?',
        'K·ªπ nƒÉng thi·∫øt y·∫øu cho data scientist?'
      ]
    },
    {
      title: 'T∆∞ V·∫•n Ngh·ªÅ Nghi·ªáp',
      icon: Target,
      color: 'purple',
      prompts: [
        'Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp c√¥ng ngh·ªá 2024?',
        'M·∫πo x√¢y d·ª±ng portfolio m·∫°nh',
        'CV developer n√™n c√≥ g√¨?',
        'Th∆∞∆°ng l∆∞·ª£ng l∆∞∆°ng trong c√¥ng ngh·ªá?',
        '·ª®ng tuy·ªÉn vi·ªác l√†m t·ª´ xa hi·ªáu qu·∫£?'
      ]
    },
    {
      title: 'Th√¥ng Tin Th·ªã Tr∆∞·ªùng',
      icon: Globe,
      color: 'orange',
      prompts: [
        'C∆° h·ªôi vi·ªác l√†m ph√π h·ª£p v·ªõi t√¥i',
        'T∆∞∆°ng lai c·ªßa AI v√† machine learning?',
        'Ng√†nh c√¥ng nghi·ªáp ƒëang ph√°t tri·ªÉn?',
        'T√°c ƒë·ªông blockchain ƒë·∫øn vi·ªác l√†m?',
        'Vai tr√≤ m·ªõi trong cybersecurity?'
      ]
    }
  ];

  const quickPrompts = [
    'Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp c√¥ng ngh·ªá 2024?',
    'T·∫°o l·ªô tr√¨nh h·ªçc JavaScript',
    'L·ªô tr√¨nh h·ªçc Python t·ª´ c∆° b·∫£n',
    'T·∫°o roadmap h·ªçc React.js',
    'C∆° h·ªôi vi·ªác l√†m ph√π h·ª£p v·ªõi t√¥i'
  ];

  // Sample roadmap data
  const roadmapTemplates = {
    javascript: {
      id: 'js-roadmap',
      title: 'L·ªô Tr√¨nh H·ªçc JavaScript To√†n Di·ªán',
      description: 'T·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, tr·ªü th√†nh JavaScript Developer chuy√™n nghi·ªáp',
      totalDuration: '4-6 th√°ng',
      difficulty: 'Beginner to Advanced',
      prerequisites: ['Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ m√°y t√≠nh', 'Ki√™n nh·∫´n v√† ƒëam m√™ h·ªçc h·ªèi'],
      careerOutcomes: ['Frontend Developer', 'Backend Developer', 'Full-stack Developer', 'Mobile Developer'],
      steps: [
        {
          id: 'step1',
          title: 'N·ªÅn T·∫£ng Web Development',
          description: 'H·ªçc HTML, CSS c∆° b·∫£n ƒë·ªÉ hi·ªÉu c·∫•u tr√∫c v√† styling web',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Beginner' as const,
          skills: ['HTML5 semantic', 'CSS3 v√† Flexbox/Grid', 'Responsive design'],
          resources: ['freeCodeCamp HTML/CSS', 'MDN Web Docs', 'CSS Tricks']
        },
        {
          id: 'step2',
          title: 'JavaScript C∆° B·∫£n',
          description: 'N·∫Øm v·ªØng c√∫ ph√°p v√† kh√°i ni·ªám c∆° b·∫£n c·ªßa JavaScript',
          duration: '3-4 tu·∫ßn',
          difficulty: 'Beginner' as const,
          skills: ['Variables & Data Types', 'Functions & Scope', 'Arrays & Objects', 'Control Flow'],
          resources: ['JavaScript.info', 'Eloquent JavaScript', 'Codecademy JS']
        },
        {
          id: 'step3',
          title: 'DOM Manipulation & Events',
          description: 'H·ªçc c√°ch t∆∞∆°ng t√°c v·ªõi trang web ƒë·ªông',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Intermediate' as const,
          skills: ['DOM Selection', 'Event Handling', 'Dynamic Content', 'Form Validation'],
          resources: ['Vanilla JS Projects', 'DOM Challenges', 'Event Listener Tutorials']
        },
        {
          id: 'step4',
          title: 'ES6+ & Modern JavaScript',
          description: 'H·ªçc c√°c t√≠nh nƒÉng hi·ªán ƒë·∫°i c·ªßa JavaScript',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Intermediate' as const,
          skills: ['Arrow Functions', 'Destructuring', 'Modules', 'Async/Await', 'Promises'],
          resources: ['ES6 Features Guide', 'Async JS Course', 'Module Patterns']
        },
        {
          id: 'step5',
          title: 'API & AJAX',
          description: 'K·∫øt n·ªëi v·ªõi backend v√† x·ª≠ l√Ω d·ªØ li·ªáu',
          duration: '2 tu·∫ßn',
          difficulty: 'Intermediate' as const,
          skills: ['Fetch API', 'JSON Handling', 'REST APIs', 'Error Handling'],
          resources: ['API Tutorial', 'JSON Server', 'Public APIs List']
        },
        {
          id: 'step6',
          title: 'Framework (React/Vue)',
          description: 'H·ªçc framework ph·ªï bi·∫øn ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng ph·ª©c t·∫°p',
          duration: '4-6 tu·∫ßn',
          difficulty: 'Advanced' as const,
          skills: ['Components', 'State Management', 'Routing', 'Hooks/Composition API'],
          resources: ['React Official Docs', 'Vue.js Guide', 'Framework Tutorials']
        },
        {
          id: 'step7',
          title: 'Tools & Deployment',
          description: 'H·ªçc c√¥ng c·ª• ph√°t tri·ªÉn v√† tri·ªÉn khai ·ª©ng d·ª•ng',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Advanced' as const,
          skills: ['Git/GitHub', 'npm/webpack', 'VS Code', 'Netlify/Vercel'],
          resources: ['Git Tutorial', 'Webpack Guide', 'Deployment Platforms']
        }
      ]
    },
    python: {
      id: 'python-roadmap',
      title: 'L·ªô Tr√¨nh H·ªçc Python To√†n Di·ªán',
      description: 'T·ª´ c∆° b·∫£n ƒë·∫øn ·ª©ng d·ª•ng th·ª±c t·∫ø, tr·ªü th√†nh Python Developer',
      totalDuration: '3-5 th√°ng',
      difficulty: 'Beginner to Advanced',
      prerequisites: ['Logic t∆∞ duy c∆° b·∫£n', 'Ki√™n nh·∫´n v√† th·ª±c h√†nh nhi·ªÅu'],
      careerOutcomes: ['Backend Developer', 'Data Scientist', 'AI/ML Engineer', 'DevOps Engineer'],
      steps: [
        {
          id: 'step1',
          title: 'Python C∆° B·∫£n',
          description: 'H·ªçc c√∫ ph√°p v√† c·∫•u tr√∫c c∆° b·∫£n c·ªßa Python',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Beginner' as const,
          skills: ['Variables & Data Types', 'Control Structures', 'Functions', 'Lists & Dictionaries'],
          resources: ['Python.org Tutorial', 'Automate the Boring Stuff', 'Python Crash Course']
        },
        {
          id: 'step2',
          title: 'OOP & Modules',
          description: 'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng v√† s·ª≠ d·ª•ng modules',
          duration: '2-3 tu·∫ßn',
          difficulty: 'Intermediate' as const,
          skills: ['Classes & Objects', 'Inheritance', 'Modules & Packages', 'Exception Handling'],
          resources: ['OOP Python Guide', 'Real Python OOP', 'Python Module Tutorial']
        },
        {
          id: 'step3',
          title: 'Libraries & Frameworks',
          description: 'Chuy√™n s√¢u theo h∆∞·ªõng: Web, Data, ho·∫∑c AI',
          duration: '4-6 tu·∫ßn',
          difficulty: 'Intermediate' as const,
          skills: ['Django/Flask (Web)', 'Pandas/NumPy (Data)', 'TensorFlow (AI)'],
          resources: ['Django Tutorial', 'Pandas Documentation', 'TensorFlow Guide']
        },
        {
          id: 'step4',
          title: 'Projects & Portfolio',
          description: 'X√¢y d·ª±ng d·ª± √°n th·ª±c t·∫ø v√† portfolio',
          duration: '3-4 tu·∫ßn',
          difficulty: 'Advanced' as const,
          skills: ['Project Planning', 'Code Organization', 'Testing', 'Documentation'],
          resources: ['GitHub Projects', 'Portfolio Examples', 'Project Ideas']
        }
      ]
    }
  };

  // Enhanced AI Response Database
  const aiResponses = {
    // Career Planning Responses
    careerTrends: {
      text: `üöÄ **Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp c√¥ng ngh·ªá 2024:**

C√°c lƒ©nh v·ª±c ƒëang b√πng n·ªï:
‚Ä¢ **AI/Machine Learning Engineer** - TƒÉng tr∆∞·ªüng 40%/nƒÉm, l∆∞∆°ng TB 150K$/nƒÉm
‚Ä¢ **Cloud Solutions Architect** - TƒÉng tr∆∞·ªüng 35%, l∆∞∆°ng TB 140K$/nƒÉm  
‚Ä¢ **DevOps/Platform Engineer** - TƒÉng tr∆∞·ªüng 30%, l∆∞∆°ng TB 130K$/nƒÉm
‚Ä¢ **Cybersecurity Specialist** - TƒÉng tr∆∞·ªüng 25%, l∆∞∆°ng TB 125K$/nƒÉm
‚Ä¢ **Data Scientist** - TƒÉng tr∆∞·ªüng 20%, l∆∞∆°ng TB 135K$/nƒÉng

C√°c vai tr√≤ m·ªõi n·ªïi:
‚Ä¢ **Web3/Blockchain Developer** - Nhu c·∫ßu cao trong DeFi v√† NFT
‚Ä¢ **AR/VR Experience Designer** - Thi·∫øt y·∫øu cho metaverse
‚Ä¢ **Edge Computing Engineer** - Quan tr·ªçng cho IoT v√† 5G
‚Ä¢ **AI Ethics Officer** - C·∫ßn thi·∫øt cho AI c√≥ tr√°ch nhi·ªám`,
      recommendations: [
        {
          title: "Lƒ©nh v·ª±c tƒÉng tr∆∞·ªüng cao",
          items: [
            "AI/ML Engineers (40% tƒÉng tr∆∞·ªüng/nƒÉm, $150K l∆∞∆°ng TB)",
            "Cloud Solutions Architects (35% tƒÉng tr∆∞·ªüng, $140K l∆∞∆°ng TB)",
            "DevOps Engineers (30% tƒÉng tr∆∞·ªüng, $130K l∆∞∆°ng TB)",
            "Cybersecurity Specialists (25% tƒÉng tr∆∞·ªüng, $125K l∆∞∆°ng TB)"
          ]
        }
      ],
      nextSteps: [
        "L√†m b√†i ki·ªÉm tra ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp",
        "Kh√°m ph√° l·ªô tr√¨nh h·ªçc chi ti·∫øt cho t·ª´ng vai tr√≤",
        "Tham gia c·ªông ƒë·ªìng c√¥ng ngh·ªá",
        "ƒê·∫∑t l·ªãch t∆∞ v·∫•n v·ªõi chuy√™n gia ngh·ªÅ nghi·ªáp"
      ]
    },

    programmingLanguages: {
      text: `üíª **Ng√¥n ng·ªØ l·∫≠p tr√¨nh n√™n h·ªçc 2024:**

**Top 5 ng√¥n ng·ªØ c·∫ßn thi·∫øt:**
‚Ä¢ **Python** - ƒêa nƒÉng, d·ªÖ h·ªçc, nhu c·∫ßu cao (AI/ML, Web, Data)
‚Ä¢ **JavaScript/TypeScript** - Thi·∫øt y·∫øu cho web development
‚Ä¢ **SQL** - C∆° s·ªü d·ªØ li·ªáu, lu√¥n c·∫ßn thi·∫øt
‚Ä¢ **Java** - Enterprise, Android, backend m·∫°nh m·∫Ω
‚Ä¢ **Go** - Backend hi·ªán ƒë·∫°i, hi·ªáu su·∫•t cao

**Theo t·ª´ng lƒ©nh v·ª±c:**
‚Ä¢ **Web Frontend:** JavaScript, TypeScript, React, Vue.js
‚Ä¢ **Backend:** Python, Java, Go, Node.js
‚Ä¢ **Mobile:** Swift (iOS), Kotlin (Android), Flutter/Dart
‚Ä¢ **AI/ML:** Python, R, Julia
‚Ä¢ **DevOps:** Shell/Bash, Python, Go`,
      recommendations: [
        {
          title: "Ng√¥n ng·ªØ thi·∫øt y·∫øu",
          items: [
            "Python - ƒêa nƒÉng, d·ªÖ h·ªçc, nhu c·∫ßu cao",
            "JavaScript - Thi·∫øt y·∫øu cho web development",
            "SQL - C∆° s·ªü d·ªØ li·ªáu, lu√¥n c·∫ßn thi·∫øt",
            "TypeScript - JavaScript an to√†n ki·ªÉu",
            "Go - Backend hi·ªán ƒë·∫°i, hi·ªáu su·∫•t cao"
          ]
        }
      ],
      nextSteps: [
        "Ch·ªçn ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë·∫ßu ti√™n",
        "Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ph√°t tri·ªÉn",
        "Ho√†n th√†nh tutorial c∆° b·∫£n",
        "X√¢y d·ª±ng d·ª± √°n ƒë·∫ßu ti√™n"
      ]
    },

    learningResources: {
      text: `üìö **T√†i li·ªáu h·ªçc t·∫≠p ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:**

**N·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn:**
‚Ä¢ **SkillVerse** - Kh√≥a h·ªçc ti·∫øng Vi·ªát ch·∫•t l∆∞·ª£ng cao
‚Ä¢ **Coursera** - Kh√≥a h·ªçc t·ª´ ƒë·∫°i h·ªçc top th·∫ø gi·ªõi
‚Ä¢ **Udemy** - ƒêa d·∫°ng kh√≥a h·ªçc th·ª±c h√†nh
‚Ä¢ **freeCodeCamp** - Mi·ªÖn ph√≠, c·ªông ƒë·ªìng m·∫°nh
‚Ä¢ **Pluralsight** - Tech skills chuy√™n s√¢u

**T√†i li·ªáu mi·ªÖn ph√≠:**
‚Ä¢ **MDN Web Docs** - T√†i li·ªáu web development
‚Ä¢ **Python.org** - T√†i li·ªáu Python ch√≠nh th·ª©c
‚Ä¢ **w3schools** - Tutorial c∆° b·∫£n, d·ªÖ hi·ªÉu
‚Ä¢ **GitHub** - M√£ ngu·ªìn m·ªü ƒë·ªÉ h·ªçc h·ªèi

**S√°ch hay:**
‚Ä¢ "Clean Code" - Robert Martin
‚Ä¢ "You Don't Know JS" - Kyle Simpson
‚Ä¢ "Automate the Boring Stuff" - Al Sweigart`,
      resources: [
        {
          title: "Kh√≥a h·ªçc l·∫≠p tr√¨nh c∆° b·∫£n",
          link: "/courses/programming-basics",
          description: "H·ªçc c∆° b·∫£n l·∫≠p tr√¨nh v·ªõi th·ª±c h√†nh"
        },
        {
          title: "L·ªô tr√¨nh Web Development",
          link: "/paths/web-development",
          description: "L·ªô tr√¨nh ho√†n ch·ªânh t·ª´ c∆° b·∫£n ƒë·∫øn chuy√™n nghi·ªáp"
        }
      ],
      nextSteps: [
        "Ch·ªçn n·ªÅn t·∫£ng h·ªçc ph√π h·ª£p",
        "ƒêƒÉng k√Ω kh√≥a h·ªçc c∆° b·∫£n",
        "Tham gia c·ªông ƒë·ªìng h·ªçc t·∫≠p",
        "Th·ª±c h√†nh h√†ng ng√†y"
      ]
    },

    learningPlan: {
      text: `üìù **K·∫ø ho·∫°ch h·ªçc t·∫≠p ƒë∆∞·ª£c c√° nh√¢n h√≥a:**

**Giai ƒëo·∫°n 1: N·ªÅn t·∫£ng (2-3 th√°ng)**
‚Ä¢ L·∫≠p tr√¨nh c∆° b·∫£n (bi·∫øn, v√≤ng l·∫∑p, h√†m)
‚Ä¢ C·∫•u tr√∫c d·ªØ li·ªáu v√† thu·∫≠t to√°n
‚Ä¢ Version control v·ªõi Git/GitHub
‚Ä¢ Command line v√† terminal
‚Ä¢ Kh√°i ni·ªám khoa h·ªçc m√°y t√≠nh c∆° b·∫£n

**Giai ƒëo·∫°n 2: Chuy√™n m√¥n (3-4 th√°ng)**
‚Ä¢ Ch·ªçn focus: Frontend ho·∫∑c Backend
‚Ä¢ H·ªçc framework li√™n quan
‚Ä¢ Th√†nh th·∫°o c√¥ng c·ª• ph√°t tri·ªÉn
‚Ä¢ Th·ª±c h√†nh v·ªõi d·ª± √°n th·ª±c t·∫ø
‚Ä¢ X√¢y d·ª±ng portfolio

**Giai ƒëo·∫°n 3: N√¢ng cao (2-3 th√°ng)**
‚Ä¢ H·ªçc advanced concepts
‚Ä¢ System design v√† architecture
‚Ä¢ Testing v√† deployment
‚Ä¢ Soft skills v√† teamwork`,
      recommendations: [
        {
          title: "Giai ƒëo·∫°n n·ªÅn t·∫£ng",
          items: [
            "L·∫≠p tr√¨nh c∆° b·∫£n (bi·∫øn, v√≤ng l·∫∑p, h√†m)",
            "C·∫•u tr√∫c d·ªØ li·ªáu v√† thu·∫≠t to√°n",
            "Version control v·ªõi Git",
            "S·ª≠ d·ª•ng command line",
            "Kh√°i ni·ªám khoa h·ªçc m√°y t√≠nh"
          ]
        }
      ],
      nextSteps: [
        "Ho√†n th√†nh ƒë√°nh gi√° k·ªπ nƒÉng",
        "ƒê·∫∑t m·ª•c ti√™u h·ªçc t·∫≠p",
        "T·∫°o l·ªãch h·ªçc",
        "Tham gia nh√≥m h·ªçc t·∫≠p"
      ]
    },

    jobOpportunities: {
      text: `üíº **C∆° h·ªôi vi·ªác l√†m ph√π h·ª£p:**

**Vi·ªác l√†m Frontend Developer:**
‚Ä¢ **React Developer** - 50-80 tri·ªáu/th√°ng
‚Ä¢ **Vue.js Developer** - 45-70 tri·ªáu/th√°ng  
‚Ä¢ **Angular Developer** - 55-85 tri·ªáu/th√°ng
‚Ä¢ **UI/UX Developer** - 40-65 tri·ªáu/th√°ng

**Vi·ªác l√†m Backend Developer:**
‚Ä¢ **Node.js Developer** - 60-90 tri·ªáu/th√°ng
‚Ä¢ **Python Developer** - 55-85 tri·ªáu/th√°ng
‚Ä¢ **Java Developer** - 65-95 tri·ªáu/th√°ng
‚Ä¢ **Go Developer** - 70-100 tri·ªáu/th√°ng

**Vi·ªác l√†m Full-stack:**
‚Ä¢ **MERN Stack** - 70-110 tri·ªáu/th√°ng
‚Ä¢ **Django + React** - 65-100 tri·ªáu/th√°ng

**Xu h∆∞·ªõng remote work:**
‚Ä¢ 80% c√¥ng ty cho ph√©p l√†m vi·ªác t·ª´ xa
‚Ä¢ C∆° h·ªôi l√†m vi·ªác cho c√¥ng ty qu·ªëc t·∫ø`,
      recommendations: [
        {
          title: "Vi·ªác l√†m hot nh·∫•t",
          items: [
            "React Developer - 50-80 tri·ªáu/th√°ng",
            "Node.js Developer - 60-90 tri·ªáu/th√°ng",
            "Python Developer - 55-85 tri·ªáu/th√°ng",
            "Full-stack MERN - 70-110 tri·ªáu/th√°ng"
          ]
        }
      ],
      nextSteps: [
        "C·∫≠p nh·∫≠t CV v√† portfolio",
        "Luy·ªán t·∫≠p coding interview",
        "T√¨m hi·ªÉu v·ªÅ c√¥ng ty m·ª•c ti√™u",
        "Chu·∫©n b·ªã c√¢u h·ªèi ph·ªèng v·∫•n"
      ]
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, newMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response with delay
    setTimeout(() => {
      const response = getBotResponse(inputMessage);
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response.text,
        timestamp: new Date(),
        recommendations: response.recommendations,
        resources: response.resources,
        nextSteps: response.nextSteps,
        roadmap: response.roadmap
      };
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const getBotResponse = (message: string): AIResponse => {
    const lowerMessage = message.toLowerCase();
    
    // Roadmap requests - check first for specific language roadmaps
    if ((lowerMessage.includes('l·ªô tr√¨nh') || lowerMessage.includes('roadmap') || lowerMessage.includes('t·∫°o')) && 
        (lowerMessage.includes('javascript') || lowerMessage.includes('js'))) {
      return {
        text: `üó∫Ô∏è **L·ªô Tr√¨nh H·ªçc JavaScript To√†n Di·ªán**

T√¥i ƒë√£ t·∫°o cho b·∫°n m·ªôt l·ªô tr√¨nh h·ªçc JavaScript chi ti·∫øt t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. L·ªô tr√¨nh n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† s·∫Ω gi√∫p b·∫°n tr·ªü th√†nh JavaScript Developer chuy√™n nghi·ªáp trong 4-6 th√°ng.

**T·ªïng quan:**
‚Ä¢ ‚è±Ô∏è Th·ªùi gian: 4-6 th√°ng
‚Ä¢ üìö 7 giai ƒëo·∫°n h·ªçc t·∫≠p
‚Ä¢ üéØ M·ª•c ti√™u: Frontend/Backend Developer
‚Ä¢ üíº M·ª©c l∆∞∆°ng: 40-80 tri·ªáu/th√°ng

B·∫°n c√≥ th·ªÉ theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p v√† ƒë√°nh d·∫•u ho√†n th√†nh t·ª´ng b∆∞·ªõc trong l·ªô tr√¨nh b√™n d∆∞·ªõi!`,
        roadmap: roadmapTemplates.javascript,
        nextSteps: [
          "B·∫Øt ƒë·∫ßu v·ªõi Giai ƒëo·∫°n 1: HTML/CSS",
          "C√†i ƒë·∫∑t VS Code v√† browser",
          "Tham gia c·ªông ƒë·ªìng JavaScript Vietnam",
          "ƒê·∫∑t m·ª•c ti√™u h·ªçc 1-2 gi·ªù/ng√†y"
        ]
      };
    }

    if ((lowerMessage.includes('l·ªô tr√¨nh') || lowerMessage.includes('roadmap') || lowerMessage.includes('t·∫°o')) && 
        lowerMessage.includes('python')) {
      return {
        text: `üêç **L·ªô Tr√¨nh H·ªçc Python To√†n Di·ªán**

T√¥i ƒë√£ t·∫°o cho b·∫°n m·ªôt l·ªô tr√¨nh h·ªçc Python chi ti·∫øt, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. Python l√† ng√¥n ng·ªØ ƒëa nƒÉng, d·ªÖ h·ªçc v√† c√≥ nhi·ªÅu c∆° h·ªôi ngh·ªÅ nghi·ªáp.

**T·ªïng quan:**
‚Ä¢ ‚è±Ô∏è Th·ªùi gian: 3-5 th√°ng
‚Ä¢ üìö 4 giai ƒëo·∫°n ch√≠nh
‚Ä¢ üéØ M·ª•c ti√™u: Backend/Data/AI Developer
‚Ä¢ üíº M·ª©c l∆∞∆°ng: 50-90 tri·ªáu/th√°ng

L·ªô tr√¨nh n√†y bao g·ªìm t·ª´ c√∫ ph√°p c∆° b·∫£n ƒë·∫øn ·ª©ng d·ª•ng th·ª±c t·∫ø trong Web, Data Science, ho·∫∑c AI!`,
        roadmap: roadmapTemplates.python,
        nextSteps: [
          "C√†i ƒë·∫∑t Python v√† PyCharm/VS Code",
          "B·∫Øt ƒë·∫ßu v·ªõi Python c∆° b·∫£n",
          "Ch·ªçn h∆∞·ªõng chuy√™n s√¢u (Web/Data/AI)",
          "Th·ª±c h√†nh coding h√†ng ng√†y"
        ]
      };
    }

    // General roadmap request
    if (lowerMessage.includes('l·ªô tr√¨nh') || lowerMessage.includes('roadmap') || lowerMessage.includes('k·∫ø ho·∫°ch h·ªçc')) {
      return {
        text: `üó∫Ô∏è **T·∫°o L·ªô Tr√¨nh H·ªçc C√° Nh√¢n H√≥a**

T√¥i c√≥ th·ªÉ t·∫°o l·ªô tr√¨nh h·ªçc chi ti·∫øt cho c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn:

**L·ªô tr√¨nh c√≥ s·∫µn:**
‚Ä¢ üü® **JavaScript** - Frontend/Backend development
‚Ä¢ üêç **Python** - Backend/Data Science/AI
‚Ä¢ ‚öõÔ∏è **React** - Frontend framework
‚Ä¢ üåê **Web Development** - Full-stack
‚Ä¢ üìä **Data Science** - Python + ML
‚Ä¢ ü§ñ **AI/Machine Learning** - Deep learning

**ƒê·ªÉ t·∫°o l·ªô tr√¨nh ph√π h·ª£p, h√£y cho t√¥i bi·∫øt:**
‚Ä¢ Ng√¥n ng·ªØ/c√¥ng ngh·ªá b·∫°n mu·ªën h·ªçc
‚Ä¢ M·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n
‚Ä¢ Th·ªùi gian c√≥ th·ªÉ d√†nh ƒë·ªÉ h·ªçc
‚Ä¢ Kinh nghi·ªám hi·ªán t·∫°i c·ªßa b·∫°n

V√≠ d·ª•: "T·∫°o l·ªô tr√¨nh h·ªçc JavaScript" ho·∫∑c "L·ªô tr√¨nh h·ªçc Python cho Data Science"`,
        nextSteps: [
          "Ch·ªçn ng√¥n ng·ªØ l·∫≠p tr√¨nh mu·ªën h·ªçc",
          "X√°c ƒë·ªãnh m·ª•c ti√™u ngh·ªÅ nghi·ªáp",
          "ƒê√°nh gi√° th·ªùi gian c√≥ th·ªÉ h·ªçc",
          "Y√™u c·∫ßu t·∫°o l·ªô tr√¨nh c·ª• th·ªÉ"
        ]
      };
    }
    
    // Greeting responses
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hi') || lowerMessage.includes('hey') || lowerMessage.includes('hello')) {
      return {
        text: `Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω AI c·ªßa SkillVerse. 

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
üéØ **L·∫≠p k·∫ø ho·∫°ch ngh·ªÅ nghi·ªáp** - T∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng v√† l·ªô tr√¨nh ph√°t tri·ªÉn
üìö **ƒê·ªÅ xu·∫•t kh√≥a h·ªçc** - T√¨m kh√≥a h·ªçc ph√π h·ª£p v·ªõi m·ª•c ti√™u
üíº **Ph√¢n t√≠ch th·ªã tr∆∞·ªùng vi·ªác l√†m** - C∆° h·ªôi v√† xu h∆∞·ªõng tuy·ªÉn d·ª•ng  
üöÄ **Ph√°t tri·ªÉn k·ªπ nƒÉng** - L·ªô tr√¨nh h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao

B·∫°n quan t√¢m ƒë·∫øn lƒ©nh v·ª±c n√†o? H√£y chia s·∫ª m·ª•c ti√™u c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n t·ªët nh·∫•t!`
      };
    }

    // Career trends
    if (lowerMessage.includes('xu h∆∞·ªõng') || lowerMessage.includes('ngh·ªÅ nghi·ªáp') || lowerMessage.includes('career') || lowerMessage.includes('trends')) {
      return aiResponses.careerTrends;
    }

    // Programming languages
    if (lowerMessage.includes('ng√¥n ng·ªØ l·∫≠p tr√¨nh') || lowerMessage.includes('n√™n h·ªçc') || lowerMessage.includes('programming language')) {
      return aiResponses.programmingLanguages;
    }

    // Learning resources
    if (lowerMessage.includes('t√†i li·ªáu') || lowerMessage.includes('h·ªçc t·∫≠p') || lowerMessage.includes('resources') || lowerMessage.includes('ƒë·ªÅ xu·∫•t')) {
      return aiResponses.learningResources;
    }

    // Learning plan
    if (lowerMessage.includes('k·∫ø ho·∫°ch') || lowerMessage.includes('l·ªô tr√¨nh') || lowerMessage.includes('plan') || lowerMessage.includes('roadmap')) {
      return aiResponses.learningPlan;
    }

    // Job opportunities
    if (lowerMessage.includes('vi·ªác l√†m') || lowerMessage.includes('c∆° h·ªôi') || lowerMessage.includes('job') || lowerMessage.includes('career opportunity')) {
      return aiResponses.jobOpportunities;
    }

    // Specific tech topics
    if (lowerMessage.includes('react')) {
      return {
        text: `‚öõÔ∏è **React - Th∆∞ vi·ªán Frontend h√†ng ƒë·∫ßu**

**T·∫°i sao n√™n h·ªçc React:**
‚Ä¢ ƒê∆∞·ª£c s·ª≠ d·ª•ng b·ªüi Facebook, Netflix, Airbnb
‚Ä¢ C·ªông ƒë·ªìng l·ªõn v√† t√†i li·ªáu phong ph√∫
‚Ä¢ Ecosystem m·∫°nh m·∫Ω v·ªõi Redux, Next.js
‚Ä¢ C∆° h·ªôi vi·ªác l√†m cao (50-80 tri·ªáu/th√°ng)

**L·ªô tr√¨nh h·ªçc React:**
1. **C∆° b·∫£n:** HTML, CSS, JavaScript ES6+
2. **React c∆° b·∫£n:** Components, Props, State
3. **React Hooks:** useState, useEffect, custom hooks
4. **State Management:** Context API, Redux
5. **Routing:** React Router
6. **Testing:** Jest, React Testing Library

**D·ª± √°n th·ª±c h√†nh:**
‚Ä¢ Todo App v·ªõi hooks
‚Ä¢ E-commerce website
‚Ä¢ Social media dashboard`,
        nextSteps: [
          "H·ªçc JavaScript ES6+ tr∆∞·ªõc",
          "B·∫Øt ƒë·∫ßu v·ªõi Create React App",
          "Th·ª±c h√†nh v·ªõi d·ª± √°n nh·ªè",
          "Tham gia c·ªông ƒë·ªìng React Vietnam"
        ]
      };
    }

    if (lowerMessage.includes('python')) {
      return {
        text: `üêç **Python - Ng√¥n ng·ªØ ƒëa nƒÉng s·ªë 1**

**∆Øu ƒëi·ªÉm c·ªßa Python:**
‚Ä¢ C√∫ ph√°p ƒë∆°n gi·∫£n, d·ªÖ h·ªçc
‚Ä¢ ·ª®ng d·ª•ng ƒëa d·∫°ng: Web, AI/ML, Data Science
‚Ä¢ Th∆∞ vi·ªán phong ph√∫
‚Ä¢ C·ªông ƒë·ªìng l·ªõn v√† h·ªó tr·ª£ t·ªët
‚Ä¢ L∆∞∆°ng cao (55-85 tri·ªáu/th√°ng)

**Lƒ©nh v·ª±c ·ª©ng d·ª•ng:**
‚Ä¢ **Web Development:** Django, Flask, FastAPI
‚Ä¢ **Data Science:** Pandas, NumPy, Matplotlib
‚Ä¢ **AI/Machine Learning:** TensorFlow, PyTorch, scikit-learn
‚Ä¢ **Automation:** Selenium, requests, BeautifulSoup
‚Ä¢ **Desktop Apps:** tkinter, PyQt

**L·ªô tr√¨nh h·ªçc Python:**
1. C√∫ ph√°p c∆° b·∫£n v√† OOP
2. Ch·ªçn chuy√™n ng√†nh (Web/Data/AI)
3. H·ªçc framework t∆∞∆°ng ·ª©ng
4. X√¢y d·ª±ng d·ª± √°n th·ª±c t·∫ø`,
        nextSteps: [
          "C√†i ƒë·∫∑t Python v√† IDE",
          "H·ªçc c√∫ ph√°p c∆° b·∫£n",
          "Ch·ªçn lƒ©nh v·ª±c chuy√™n s√¢u",
          "X√¢y d·ª±ng d·ª± √°n ƒë·∫ßu ti√™n"
        ]
      };
    }

    if (lowerMessage.includes('frontend') || lowerMessage.includes('front-end')) {
      return {
        text: `üé® **Frontend Development - X√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng**

**K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ **C∆° b·∫£n:** HTML5, CSS3, JavaScript ES6+
‚Ä¢ **CSS Framework:** Bootstrap, Tailwind CSS
‚Ä¢ **JavaScript Framework:** React, Vue.js, Angular
‚Ä¢ **Tools:** Git, Webpack, npm/yarn
‚Ä¢ **Design:** UI/UX principles, Figma

**L·ªô tr√¨nh h·ªçc Frontend:**
1. **N·ªÅn t·∫£ng (2-3 th√°ng):** HTML, CSS, JavaScript
2. **Framework (2-3 th√°ng):** React ho·∫∑c Vue.js
3. **Tools & Workflow (1 th√°ng):** Git, build tools
4. **Advanced (2-3 th√°ng):** State management, testing

**M·ª©c l∆∞∆°ng Frontend Developer:**
‚Ä¢ Junior: 25-40 tri·ªáu/th√°ng
‚Ä¢ Mid-level: 40-65 tri·ªáu/th√°ng  
‚Ä¢ Senior: 65-100 tri·ªáu/th√°ng

**D·ª± √°n portfolio:**
‚Ä¢ Landing page responsive
‚Ä¢ Todo app v·ªõi framework
‚Ä¢ E-commerce frontend
‚Ä¢ Dashboard admin`,
        recommendations: [
          {
            title: "K·ªπ nƒÉng Frontend thi·∫øt y·∫øu",
            items: [
              "HTML5, CSS3, JavaScript ES6+",
              "React ho·∫∑c Vue.js",
              "Responsive design",
              "Version control (Git)",
              "UI/UX c∆° b·∫£n"
            ]
          }
        ],
        nextSteps: [
          "H·ªçc HTML, CSS c∆° b·∫£n",
          "Th√†nh th·∫°o JavaScript",
          "Ch·ªçn React ho·∫∑c Vue.js",
          "X√¢y d·ª±ng portfolio"
        ]
      };
    }

    if (lowerMessage.includes('backend') || lowerMessage.includes('back-end')) {
      return {
        text: `‚öôÔ∏è **Backend Development - X√¢y d·ª±ng logic v√† c∆° s·ªü d·ªØ li·ªáu**

**K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ **Ng√¥n ng·ªØ:** Python, Node.js, Java, Go, PHP
‚Ä¢ **Framework:** Express.js, Django, Spring Boot
‚Ä¢ **Database:** MySQL, PostgreSQL, MongoDB
‚Ä¢ **API:** REST, GraphQL
‚Ä¢ **DevOps:** Docker, AWS/GCP, CI/CD

**L·ªô tr√¨nh h·ªçc Backend:**
1. **Ch·ªçn ng√¥n ng·ªØ:** Python/Node.js (d·ªÖ b·∫Øt ƒë·∫ßu)
2. **Framework:** Django/Flask ho·∫∑c Express.js
3. **Database:** SQL c∆° b·∫£n, ORM
4. **API Development:** REST API, authentication
5. **Deployment:** Cloud services, containerization

**M·ª©c l∆∞∆°ng Backend Developer:**
‚Ä¢ Junior: 30-50 tri·ªáu/th√°ng
‚Ä¢ Mid-level: 50-80 tri·ªáu/th√°ng
‚Ä¢ Senior: 80-120 tri·ªáu/th√°ng

**D·ª± √°n th·ª±c h√†nh:**
‚Ä¢ REST API cho blog
‚Ä¢ Authentication system
‚Ä¢ E-commerce backend
‚Ä¢ Real-time chat app`,
        recommendations: [
          {
            title: "Backend roadmap",
            items: [
              "Python/Django ho·∫∑c Node.js/Express",
              "SQL v√† database design",
              "API development",
              "Cloud deployment",
              "Security v√† performance"
            ]
          }
        ],
        nextSteps: [
          "Ch·ªçn ng√¥n ng·ªØ backend",
          "H·ªçc SQL v√† database",
          "X√¢y d·ª±ng API ƒë·∫ßu ti√™n",
          "Deploy l√™n cloud"
        ]
      };
    }

    // AI/ML topics
    if (lowerMessage.includes('ai') || lowerMessage.includes('machine learning') || lowerMessage.includes('ml') || lowerMessage.includes('tr√≠ tu·ªá nh√¢n t·∫°o')) {
      return {
        text: `ü§ñ **AI/Machine Learning - Lƒ©nh v·ª±c hot nh·∫•t**

**T·∫°i sao h·ªçc AI/ML:**
‚Ä¢ TƒÉng tr∆∞·ªüng vi·ªác l√†m 40%/nƒÉm
‚Ä¢ L∆∞∆°ng cao: 80-150 tri·ªáu/th√°ng
‚Ä¢ ·ª®ng d·ª•ng r·ªông r√£i trong m·ªçi ng√†nh
‚Ä¢ T∆∞∆°ng lai c·ªßa c√¥ng ngh·ªá

**K·ªπ nƒÉng c·∫ßn thi·∫øt:**
‚Ä¢ **To√°n h·ªçc:** Statistics, Linear Algebra, Calculus
‚Ä¢ **Programming:** Python (ch√≠nh), R
‚Ä¢ **Libraries:** NumPy, Pandas, scikit-learn, TensorFlow, PyTorch
‚Ä¢ **Data:** Data cleaning, visualization, feature engineering
‚Ä¢ **ML Algorithms:** Supervised, Unsupervised, Deep Learning

**L·ªô tr√¨nh h·ªçc AI/ML:**
1. **N·ªÅn t·∫£ng (3-4 th√°ng):** Python, Statistics, Math
2. **Machine Learning (3-4 th√°ng):** Algorithms, scikit-learn
3. **Deep Learning (2-3 th√°ng):** Neural Networks, TensorFlow
4. **Specialization:** Computer Vision, NLP, ho·∫∑c Reinforcement Learning

**C∆° h·ªôi ngh·ªÅ nghi·ªáp:**
‚Ä¢ Machine Learning Engineer
‚Ä¢ Data Scientist  
‚Ä¢ AI Research Scientist
‚Ä¢ Computer Vision Engineer
‚Ä¢ NLP Engineer`,
        recommendations: [
          {
            title: "L·ªô tr√¨nh AI/ML",
            items: [
              "Python v√† to√°n h·ªçc c∆° b·∫£n",
              "Machine Learning v·ªõi scikit-learn",
              "Deep Learning v·ªõi TensorFlow/PyTorch",
              "Chuy√™n s√¢u: CV, NLP, ho·∫∑c RL",
              "D·ª± √°n th·ª±c t·∫ø v√† portfolio"
            ]
          }
        ],
        nextSteps: [
          "H·ªçc Python v√† statistics",
          "Kh√≥a h·ªçc ML c∆° b·∫£n",
          "Th·ª±c h√†nh v·ªõi datasets",
          "X√¢y d·ª±ng d·ª± √°n ML"
        ]
      };
    }

    // Default response with helpful suggestions
    return {
      text: `ü§î T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm th√¥ng tin v·ªÅ "${message}". 

ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n, b·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:

üéØ **Ngh·ªÅ nghi·ªáp & ƒê·ªãnh h∆∞·ªõng:**
‚Ä¢ "Xu h∆∞·ªõng ngh·ªÅ nghi·ªáp c√¥ng ngh·ªá 2024?"
‚Ä¢ "L√†m sao ƒë·ªÉ chuy·ªÉn sang l·∫≠p tr√¨nh?"
‚Ä¢ "L·ªô tr√¨nh tr·ªü th√†nh Full-stack Developer?"

üíª **K·ªπ thu·∫≠t & L·∫≠p tr√¨nh:**
‚Ä¢ "N√™n h·ªçc ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o?"
‚Ä¢ "React hay Vue.js t·ªët h∆°n?"
‚Ä¢ "L·ªô tr√¨nh h·ªçc AI/Machine Learning?"

üìö **H·ªçc t·∫≠p & Ph√°t tri·ªÉn:**
‚Ä¢ "T√†i li·ªáu h·ªçc l·∫≠p tr√¨nh mi·ªÖn ph√≠?"
‚Ä¢ "C√°ch x√¢y d·ª±ng portfolio m·∫°nh?"
‚Ä¢ "K·ªπ nƒÉng m·ªÅm quan tr·ªçng cho developer?"

üíº **Vi·ªác l√†m & Th·ªã tr∆∞·ªùng:**
‚Ä¢ "M·ª©c l∆∞∆°ng developer t·∫°i Vi·ªát Nam?"
‚Ä¢ "C√°ch chu·∫©n b·ªã ph·ªèng v·∫•n l·∫≠p tr√¨nh?"
‚Ä¢ "L√†m vi·ªác remote hi·ªáu qu·∫£?"

H√£y h·ªèi c·ª• th·ªÉ h∆°n ƒë·ªÉ t√¥i c√≥ th·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ch√≠nh x√°c nh·∫•t!`,
      nextSteps: [
        "H·ªèi v·ªÅ lƒ©nh v·ª±c c·ª• th·ªÉ b·∫°n quan t√¢m",
        "Chia s·∫ª m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n",
        "Cho bi·∫øt kinh nghi·ªám hi·ªán t·∫°i",
        "S·ª≠ d·ª•ng g·ª£i √Ω ph√≠a tr√™n"
      ]
    };
  };

  const handleSuggestionClick = (example: string) => {
    setInputMessage(example);
  };

  const recommendations: Recommendation[] = [
    {
      type: 'course',
      title: 'React.js N√¢ng Cao',
      provider: 'SkillVerse',
      duration: '8 gi·ªù',
      rating: 4.8,
      students: 1234,
      price: 'Mi·ªÖn ph√≠',
      image: 'https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=400'
    },
    {
      type: 'job',
      title: 'Frontend Developer',
      company: 'C√¥ng ty C√¥ng ngh·ªá',
      location: 'L√†m vi·ªác t·ª´ xa',
      salary: '50-70 tri·ªáu/th√°ng',
      posted: '2 ng√†y tr∆∞·ªõc',
      image: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400'
    },
    {
      type: 'skill',
      title: 'TypeScript',
      category: 'L·∫≠p tr√¨nh',
      difficulty: 'Trung c·∫•p',
      timeToLearn: '4-6 tu·∫ßn',
      demand: 'Cao',
      image: 'https://images.pexels.com/photos/1181671/pexels-photo-1181671.jpeg?auto=compress&cs=tinysrgb&w=400'
    }
  ];

  // Type guard functions
  const isCourseRecommendation = (rec: Recommendation): rec is CourseRecommendation => rec.type === 'course';
  const isJobRecommendation = (rec: Recommendation): rec is JobRecommendation => rec.type === 'job';
  const isSkillRecommendation = (rec: Recommendation): rec is SkillRecommendation => rec.type === 'skill';
  return (
    <div className={`sv-chatbot-container ${theme}`} data-theme={theme}>
      <div className="sv-chatbot-content">
        {/* Header */}
        <div className="sv-chatbot-header">
          <h1 className="sv-chatbot-header__title">Tr·ª£ L√Ω AI SkillVerse</h1>
          <p className="sv-chatbot-header__description">
            T∆∞ v·∫•n ngh·ªÅ nghi·ªáp v√† l·ªô tr√¨nh h·ªçc t·∫≠p ƒë∆∞·ª£c c√° nh√¢n h√≥a b·∫±ng AI
          </p>
        </div>

        {/* Features Grid */}
        <div className="sv-features-grid">
          {features.map((feature, index) => (
            <div key={index} className={`sv-feature-card sv-feature-card--${feature.color}`}>
              <feature.icon className="sv-feature-card__icon" />
              <h3 className="sv-feature-card__title">{feature.title}</h3>
              <p className="sv-feature-card__description">{feature.description}</p>
            </div>
          ))}
        </div>

        {/* Quick Prompts */}
        <div className="sv-quick-prompts">
          <div className="sv-quick-prompts__title">
            <Sparkles className="h-5 w-5 text-yellow-500" />
            <span>B·∫Øt ƒê·∫ßu Nhanh</span>
          </div>
          <div className="sv-quick-prompts__grid">
            {quickPrompts.map((prompt, index) => (
              <button
                key={index}
                className="sv-quick-prompt-btn"
                onClick={() => handleSuggestionClick(prompt)}
              >
                {index === 0 && <TrendingUp className="h-4 w-4" />}
                {index === 1 && <Book className="h-4 w-4" />}
                {index === 2 && <Code className="h-4 w-4" />}
                {index === 3 && <Clock className="h-4 w-4" />}
                {index === 4 && <Briefcase className="h-4 w-4" />}
                <span>{prompt}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Chat Messages */}
        <div className="sv-chat-messages">
          {messages.map((msg: Message) => (
            <div
              key={msg.id}
              className={`sv-chat-message ${
                msg.type === 'bot' ? 'sv-chat-message--bot' : 'sv-chat-message--user'
              }`}
            >
              <div className="sv-chat-message__avatar">
                {msg.type === 'bot' ? (
                  <Bot className="text-blue-500" />
                ) : (
                  <User className="text-purple-500" />
                )}
              </div>
              <div className="sv-chat-message__content">
                <div className="sv-chat-message__text">
                  {msg.content.split('\n').map((line: string, i: number) => (
                    <div key={i}>{line}</div>
                  ))}
                </div>
                
                {/* Enhanced Message Features */}
                {msg.recommendations && (
                  <div className="sv-chat-message__text">
                    <h4>üìã ƒê·ªÅ xu·∫•t:</h4>
                    {msg.recommendations.map((rec: RecommendationSection, i: number) => (
                      <div key={i} className="sv-message-rec-section">
                        <h5>{rec.title}:</h5>
                        <ul>
                          {rec.items.map((item: string, j: number) => (
                            <li key={j}>{item}</li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                )}

                {msg.resources && (
                  <div className="sv-chat-message__text">
                    <h4>üìö T√†i li·ªáu tham kh·∫£o:</h4>
                    {msg.resources.map((resource: Resource, i: number) => (
                      <div key={i} className="sv-message-resource">
                        <a href={resource.link} className="sv-resource-link">
                          {resource.title}
                        </a>
                        <p>{resource.description}</p>
                      </div>
                    ))}
                  </div>
                )}

                {msg.nextSteps && (
                  <div className="sv-chat-message__text">
                    <h4>üöÄ B∆∞·ªõc ti·∫øp theo:</h4>
                    <ul>
                      {msg.nextSteps.map((step: string, i: number) => (
                        <li key={i}>{step}</li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Interactive Roadmap Component */}
                {msg.roadmap && (
                  <div className="sv-roadmap-container">
                    <div className="sv-roadmap-header">
                      <h3>üó∫Ô∏è {msg.roadmap.title}</h3>
                      <p>{msg.roadmap.description}</p>
                      <div className="sv-roadmap-meta">
                        <span className="sv-roadmap-duration">‚è±Ô∏è {msg.roadmap.totalDuration}</span>
                        <span className="sv-roadmap-difficulty">üìä {msg.roadmap.difficulty}</span>
                      </div>
                    </div>

                    {msg.roadmap.prerequisites && (
                      <div className="sv-roadmap-section">
                        <h4>üìã ƒêi·ªÅu ki·ªán ti√™n quy·∫øt:</h4>
                        <ul>
                          {msg.roadmap.prerequisites.map((prereq, i) => (
                            <li key={i}>{prereq}</li>
                          ))}
                        </ul>
                      </div>
                    )}

                    <div className="sv-roadmap-steps">
                      <h4>üìö C√°c b∆∞·ªõc th·ª±c hi·ªán:</h4>
                      {msg.roadmap.steps.map((step, index) => (
                        <div key={step.id} className={`sv-roadmap-step ${step.completed ? 'completed' : ''}`}>
                          <div className="sv-step-number">{index + 1}</div>
                          <div className="sv-step-content">
                            <div className="sv-step-header">
                              <h5>{step.title}</h5>
                              <div className="sv-step-meta">
                                <span className="sv-step-duration">{step.duration}</span>
                                <span className={`sv-step-difficulty sv-step-difficulty--${step.difficulty.toLowerCase()}`}>
                                  {step.difficulty}
                                </span>
                              </div>
                            </div>
                            <p className="sv-step-description">{step.description}</p>
                            
                            <div className="sv-step-skills">
                              <h6>üéØ K·ªπ nƒÉng h·ªçc ƒë∆∞·ª£c:</h6>
                              <div className="sv-skills-tags">
                                {step.skills.map((skill, i) => (
                                  <span key={i} className="sv-skill-tag">{skill}</span>
                                ))}
                              </div>
                            </div>

                            <div className="sv-step-resources">
                              <h6>üìñ T√†i li·ªáu:</h6>
                              <div className="sv-resources-list">
                                {step.resources.map((resource, i) => (
                                  <span key={i} className="sv-resource-item">{resource}</span>
                                ))}
                              </div>
                            </div>

                            <button 
                              className={`sv-step-toggle ${step.completed ? 'completed' : ''}`}
                              onClick={() => {
                                // Handle step completion toggle
                                console.log(`Toggle step ${step.id} completion`);
                              }}
                            >
                              {step.completed ? '‚úÖ ƒê√£ ho√†n th√†nh' : '‚≠ï ƒê√°nh d·∫•u ho√†n th√†nh'}
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>

                    {msg.roadmap.careerOutcomes && (
                      <div className="sv-roadmap-section">
                        <h4>üöÄ C∆° h·ªôi ngh·ªÅ nghi·ªáp:</h4>
                        <div className="sv-career-outcomes">
                          {msg.roadmap.careerOutcomes.map((career, i) => (
                            <span key={i} className="sv-career-tag">{career}</span>
                          ))}
                        </div>
                      </div>
                    )}

                    <div className="sv-roadmap-actions">
                      <button className="sv-btn sv-btn--primary">
                        üì• L∆∞u l·ªô tr√¨nh
                      </button>
                      <button className="sv-btn sv-btn--outline">
                        üì§ Chia s·∫ª
                      </button>
                      <button className="sv-btn sv-btn--outline">
                        üìä Xem ti·∫øn ƒë·ªô
                      </button>
                    </div>
                  </div>
                )}

                <span className="sv-chat-message__time">
                  {msg.timestamp.toLocaleTimeString('vi-VN')}
                </span>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="sv-chat-message sv-chat-message--bot sv-chat-message--loading">
              <div className="sv-chat-message__avatar">
                <Bot className="text-blue-500" />
              </div>
              <div className="sv-chat-message__content">
                <div className="sv-chat-message__text">
                  <div className="sv-typing-dots">
                    <div className="sv-typing-dot"></div>
                    <div className="sv-typing-dot"></div>
                    <div className="sv-typing-dot"></div>
                  </div>
                  <div className="sv-typing-text">
                    <Sparkles className="h-4 w-4 mr-2 inline-block animate-spin" />
                    <span>Thinking...</span>
                  </div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <form onSubmit={handleSendMessage} className="sv-chat-input">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="H·ªèi t√¥i v·ªÅ ngh·ªÅ nghi·ªáp, kh√≥a h·ªçc, k·ªπ nƒÉng ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨..."
            className="sv-chat-input__field"
            disabled={isTyping}
          />
          <button 
            type="submit" 
            className="sv-chat-input__button"
            disabled={isTyping || !inputMessage.trim()}
          >
            <Send className="h-5 w-5" />
          </button>
        </form>

        {/* Prompt Categories */}
        <div className="sv-prompt-categories">
          {promptCategories.map((category, index) => (
            <div key={index} className={`sv-prompt-category sv-prompt-category--${category.color}`}>
              <div className="sv-prompt-category__header">
                <category.icon className="sv-prompt-category__icon" />
                <h3 className="sv-prompt-category__title">{category.title}</h3>
              </div>
              <div className="sv-prompt-category__prompts">
                {category.prompts.map((prompt, promptIndex) => (
                  <button
                    key={promptIndex}
                    className="sv-prompt-btn"
                    onClick={() => handleSuggestionClick(prompt)}
                  >
                    <span>{prompt}</span>
                    <ChevronRight className="h-4 w-4" />
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* Enhanced Recommendations Section */}
        <div className="sv-ai-recommendations">
          <div className="sv-ai-recommendations__header">
            <div className="sv-ai-recommendations__title-section">
              <h2 className="sv-ai-recommendations__title">
                ƒê·ªÅ Xu·∫•t C√° Nh√¢n H√≥a
              </h2>
              <p className="sv-ai-recommendations__description">
                D·ª±a tr√™n h·ªì s∆° v√† s·ªü th√≠ch c·ªßa b·∫°n
              </p>
            </div>
          </div>

          <div className="sv-ai-recommendations__grid">
            {recommendations.map((item, index) => {
              return (
                <div key={index} className="sv-ai-recommendation-card">
                  <div className="sv-ai-recommendation-card__image-container">
                    <img
                      src={item.image}
                      alt={item.title}
                      className="sv-ai-recommendation-card__image"
                    />
                    <div className="sv-ai-recommendation-card__badge">
                      {isCourseRecommendation(item) && <Book className="h-4 w-4" />}
                      {isJobRecommendation(item) && <Briefcase className="h-4 w-4" />}
                      {isSkillRecommendation(item) && <Award className="h-4 w-4" />}
                      <span>
                        {item.type === 'course' && 'Kh√≥a h·ªçc'}
                        {item.type === 'job' && 'Vi·ªác l√†m'}
                        {item.type === 'skill' && 'K·ªπ nƒÉng'}
                      </span>
                    </div>
                  </div>
                  
                  <div className="sv-ai-recommendation-card__content">
                    <h3 className="sv-ai-recommendation-card__title">{item.title}</h3>
                    
                    {isCourseRecommendation(item) && (
                      <>
                        <p className="sv-ai-recommendation-card__provider">
                          <Globe className="h-4 w-4" />
                          {item.provider}
                        </p>
                        <div className="sv-ai-recommendation-card__meta">
                          <div className="sv-meta-item">
                            <Clock className="h-4 w-4" />
                            <span>{item.duration}</span>
                          </div>
                          <div className="sv-meta-item">
                            <Star className="h-4 w-4 text-yellow-500" />
                            <span>{item.rating}</span>
                          </div>
                          <div className="sv-meta-item">
                            <Users className="h-4 w-4" />
                            <span>{item.students.toLocaleString()} h·ªçc vi√™n</span>
                          </div>
                        </div>
                        <div className="sv-ai-recommendation-card__footer">
                          <span className="sv-ai-recommendation-card__price">
                            <DollarSign className="h-4 w-4" />
                            {item.price}
                          </span>
                          <button className="sv-ai-recommendation-card__button">
                            <span>Xem kh√≥a h·ªçc</span>
                            <ArrowRight className="h-4 w-4" />
                          </button>
                        </div>
                      </>
                    )}
                    
                    {isJobRecommendation(item) && (
                      <>
                        <p className="sv-ai-recommendation-card__company">
                          <Briefcase className="h-4 w-4" />
                          {item.company}
                        </p>
                        <div className="sv-ai-recommendation-card__meta">
                          <div className="sv-meta-item">
                            <Globe className="h-4 w-4" />
                            <span>{item.location}</span>
                          </div>
                          <div className="sv-meta-item">
                            <DollarSign className="h-4 w-4" />
                            <span>{item.salary}</span>
                          </div>
                        </div>
                        <div className="sv-ai-recommendation-card__footer">
                          <span className="sv-ai-recommendation-card__posted">
                            <Clock className="h-4 w-4" />
                            {item.posted}
                          </span>
                          <button className="sv-ai-recommendation-card__button">
                            <span>Xem vi·ªác l√†m</span>
                            <ArrowRight className="h-4 w-4" />
                          </button>
                        </div>
                      </>
                    )}
                    
                    {isSkillRecommendation(item) && (
                      <>
                        <p className="sv-ai-recommendation-card__category">
                          <BarChart3 className="h-4 w-4" />
                          {item.category}
                        </p>
                        <div className="sv-ai-recommendation-card__meta">
                          <div className="sv-meta-item">
                            <Target className="h-4 w-4" />
                            <span>{item.difficulty}</span>
                          </div>
                          <div className="sv-meta-item">
                            <Clock className="h-4 w-4" />
                            <span>{item.timeToLearn}</span>
                          </div>
                          <div className="sv-meta-item">
                            <Zap className="h-4 w-4" />
                            <span>Nhu c·∫ßu {item.demand.toLowerCase()}</span>
                          </div>
                        </div>
                        <div className="sv-ai-recommendation-card__footer">
                          <button className="sv-ai-recommendation-card__button">
                            <span>T√¨m hi·ªÉu th√™m</span>
                            <ArrowRight className="h-4 w-4" />
                          </button>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* FAQ Section */}
        <div className="sv-faq-section">
          <h2 className="sv-faq-title">
            <Lightbulb className="h-6 w-6 text-blue-500" />
            C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
          </h2>
          <div className="sv-faq-grid">
            <div className="sv-faq-item" onClick={() => handleSuggestionClick("L√†m sao ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh?")}>
              <h3>L√†m sao ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh?</h3>
              <p>T√¨m hi·ªÉu l·ªô tr√¨nh h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao</p>
            </div>
            <div className="sv-faq-item" onClick={() => handleSuggestionClick("Ng√†nh c√¥ng ngh·ªá n√†o c√≥ tri·ªÉn v·ªçng nh·∫•t?")}>
              <h3>Ng√†nh c√¥ng ngh·ªá n√†o c√≥ tri·ªÉn v·ªçng nh·∫•t?</h3>
              <p>Kh√°m ph√° xu h∆∞·ªõng ngh·ªÅ nghi·ªáp hot nh·∫•t</p>
            </div>
            <div className="sv-faq-item" onClick={() => handleSuggestionClick("C·∫ßn bao l√¢u ƒë·ªÉ tr·ªü th√†nh developer?")}>
              <h3>C·∫ßn bao l√¢u ƒë·ªÉ tr·ªü th√†nh developer?</h3>
              <p>∆Ø·ªõc t√≠nh th·ªùi gian v√† k·∫ø ho·∫°ch h·ªçc t·∫≠p</p>
            </div>
            <div className="sv-faq-item" onClick={() => handleSuggestionClick("L∆∞∆°ng developer t·∫°i Vi·ªát Nam nh∆∞ th·∫ø n√†o?")}>
              <h3>L∆∞∆°ng developer t·∫°i Vi·ªát Nam nh∆∞ th·∫ø n√†o?</h3>
              <p>Th√¥ng tin m·ª©c l∆∞∆°ng theo kinh nghi·ªám</p>
            </div>
          </div>
        </div>

        {/* AI Stats */}
        <div className="sv-ai-stats">
          <div className="sv-ai-stats__header">
            <h3>ü§ñ Tr·ª£ l√Ω AI c·ªßa b·∫°n</h3>
            <p>ƒê∆∞·ª£c ƒë√†o t·∫°o v·ªõi h√†ng tri·ªáu c√¢u h·ªèi v·ªÅ ngh·ªÅ nghi·ªáp v√† gi√°o d·ª•c</p>
          </div>
          <div className="sv-ai-stats__grid">
            <div className="sv-stat-item">
              <div className="sv-stat-number">24/7</div>
              <div className="sv-stat-label">H·ªó tr·ª£</div>
            </div>
            <div className="sv-stat-item">
              <div className="sv-stat-number">1000+</div>
              <div className="sv-stat-label">Kh√≥a h·ªçc</div>
            </div>
            <div className="sv-stat-item">
              <div className="sv-stat-number">50+</div>
              <div className="sv-stat-label">Lƒ©nh v·ª±c</div>
            </div>
            <div className="sv-stat-item">
              <div className="sv-stat-number">95%</div>
              <div className="sv-stat-label">Ch√≠nh x√°c</div>
            </div>
          </div>
        </div>
      </div>

      {/* Meowl Guide */}
      <MeowlGuide currentPage="chatbot" />
    </div>
  );
};

export default ChatbotPage;